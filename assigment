# Q1 The task is to write a function greet that takes two arguments
def greet(name, greeting="Hello"):
    return f"{greeting}, {name}!"
print(greet("Alice"))            
print(greet("Bob", "Good morning")) 

# # Q2 The task is to create a function create_profile that takes arguments for name, age, and city as named arguments.
def create_profile(name, age=18, city="Unknown"):
    return f"Name: {name}, Age: {age}, City: {city}"

print(create_profile("Alice", 25, "New York"))
print(create_profile("Bob", city="Los Angeles"))

# Q3 The task is to write a function sum_numbers that takes any number of positional arguments
def sum_numbers(*args, **kwargs):
    total = sum(arg for arg in args if isinstance(arg, (int, float)))
    return total, kwargs
result = sum_numbers(1, 2, 3, "a", key1="value1", key2="value2")
print(result)

#  Q4 Write a function that uses map and a lambda to return a list where each element is squared.
def square_elements(lst):
    return list(map(lambda x: x ** 2, lst))
numbers = [1, 2, 3, 4, 5]
squared_numbers = square_elements(numbers)
print(squared_numbers)


# Q5 Write a function that filters out all odd numbers from a list using filter and a lambda function.
def filter_odd_numbers(lst):
    return list(filter(lambda x: x % 2 == 0, lst))
numbers = [1, 2, 3, 4, 5, 6, 7, 8]
even_numbers = filter_odd_numbers(numbers)
print(even_numbers)

# Q6 Create a list comprehension that takes a list of numbers and returns a list of their squares.
def square_elements(lst):
    return [x ** 2 for x in lst]
numbers = [1, 2, 3, 4, 5]
squared_numbers = square_elements(numbers)
print(squared_numbers)

# Q7 Use a list comprehension to create a list of even numbers from 1 to 20
even_numbers = [x for x in range(1, 21) if x % 2 == 0]
print(even_numbers)

# Q8 Write a function file _operations that creates a directory named "test folder" using os.makedirs() Then, pause the execution for 3 seconds using time.sleep(), and finally, delete the directory using os.rmdir()
import os
import time

def file_operations():
    os.makedirs("test folder")
    print("Directory 'test folder' created.")
    time.sleep(3)
    os.rmdir("test folder")
    print("Directory 'test folder' deleted.")

# Q9 Write a Python script that imports only sleep fromthe time module and renames it to print "Paused execution
from time import sleep as pause

def pause_execution(seconds):
    print("Paused execution...")
    pause(seconds)
pause_execution(3)

# Q10 Write a recursive function flatten_list that can flatten a nested list of any depth using *args and **kwargs.
def flatten_list(nested_list):
    flat_list = []
    
    for element in nested_list:
        if isinstance(element, list):
            flat_list.extend(flatten_list(element))
        else:
            flat_list.append(element)
    return flat_list
nested = [1, [2, [3, 4], 5], 6, [7, 8]]
flattened = flatten_list(nested)
print(flattened)
